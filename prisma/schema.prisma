generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Grade {
  id       Int    @id @default(autoincrement())
  level    String @unique
  students Student[]
  classes  Class[]
}

model Student {
  id             String @id
  username       String @unique
  name           String
  surname        String
  email          String? @unique
  phone          String?
  address        String
  img            String?
  bloodType      String
  sex            UserSex
  createdAtDate  DateTime @default(now())

  classId        Int
  class          Class @relation(fields: [classId], references: [id])

  parentId       String
  parent         Parent @relation(fields: [parentId], references: [id])

  gradeId        Int
  grade          Grade @relation(fields: [gradeId], references: [id])

  results        Result[]
  attendaces Attendance[]
}

model Teacher {
  id            String @id
  username      String @unique
  name          String
  surname       String
  email         String? @unique
  phone         String?
  address       String
  img           String?
  bloodType     String
  sex           UserSex
  createdAtDate DateTime @default(now())

  subjects      Subject[]
  lessons       Lesson[]
  classes       Class[]
}

model Parent {
  id            String @id
  username      String @unique
  name          String
  surname       String
  email         String? @unique
  phone         String? @unique
  address       String
  createdAtDate DateTime @default(now())

  students      Student[]
}

model Class {
  id           Int     @id @default(autoincrement())
  name         String

  supervisorId String
  supervisor   Teacher @relation(fields: [supervisorId], references: [id])

  lessons      Lesson[]
  students     Student[]

  gradeId      Int
  grade        Grade @relation(fields: [gradeId], references: [id])

  events Event[]
  announcements Announcement[]
}

model Subject {
  id       Int    @id @default(autoincrement())
  name     String @unique
  lessons  Lesson[]
  teachers Teacher[]
}

model Lesson {
  id         Int @id @default(autoincrement())
  name       String
  day        Day
  startTime  DateTime
  endTime    DateTime

  classId    Int
  class      Class @relation(fields: [classId], references: [id])

  subjectId  Int
  subject    Subject @relation(fields: [subjectId], references: [id])

  teacherId  String
  teacher    Teacher @relation(fields: [teacherId], references: [id])

  exams      Exam[]
  assignments Assignment[]
  attendaces Attendance[]

}

model Exam {
  id        Int @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId  Int
  lesson    Lesson @relation(fields: [lessonId], references: [id])

  results   Result[]
}

model Assignment {
  id        Int @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId  Int
  lesson    Lesson @relation(fields: [lessonId], references: [id])

  results   Result[]
}

model Result {
  id         Int @id @default(autoincrement())
  score      Int

 

  examId     Int?
  exam       Exam? @relation(fields: [examId], references: [id])

  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])

  studentId String?
  student   Student? @relation(fields: [studentId], references: [id])
}
model Attendance{
  id Int @id @default(autoincrement())
  date DateTime
  present Boolean
  studentId String
  student Student @relation(fields: [studentId],references: [id])
  lessonId Int
  lesson Lesson @relation(fields: [lessonId],references: [id])
}

model Event{
id         Int @id @default(autoincrement())
 title     String
 description String
 startdate DateTime
 endDate DateTime
 classId Int?
 class Class? @relation(fields: [classId],references: [id])
}
model Announcement{
id         Int @id @default(autoincrement())
 title     String
  description String
  date DateTime
  classId Int?
 class Class? @relation(fields: [classId],references: [id])

}
enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
